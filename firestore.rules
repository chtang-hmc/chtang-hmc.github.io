rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() { return request.auth != null; }

    match /posts/{postId} {
      allow read: if true;
      allow write: if isSignedIn(); // later can restrict field validation
      match /comments/{commentId} {
        allow read: if true;
        allow create: if isSignedIn() && (
          (request.resource.data.source == 'user' && request.resource.data.sessionId == request.auth.uid)
        );
        allow update, delete: if false;
      }
    }

    match /sessions/{sessionId} {
      allow create: if isSignedIn() && sessionId == request.auth.uid;
      allow update, read: if isSignedIn() && sessionId == request.auth.uid;
    }

    match /sessions/{sessionId}/interactions/{pid} {
      allow create, update: if isSignedIn() && sessionId == request.auth.uid;
      allow read: if isSignedIn() && sessionId == request.auth.uid;
    }

    match /polls/{pollId} {
      allow create: if isSignedIn() && request.resource.data.ownerUid == request.auth.uid;
      allow read, update, delete: if false;
    }
  }
}

service firebase.storage {
  match /b/{bucket}/o {
    // Public read for all files
    match /uploads/{sessionId}/{fileName} {
      allow read: if true;
      // Authenticated user can upload under their own session
      allow write: if request.auth != null && request.auth.uid == sessionId;
      // Enforce type/size (max 15MB, allow images, gifs, video mp4/webm)
      allow create: if request.resource.size < 15 * 1024 * 1024 &&
        (request.resource.contentType.matches('image/.*') ||
         request.resource.contentType.matches('video/mp4') ||
         request.resource.contentType.matches('video/webm') ||
         request.resource.contentType.matches('image/gif'));
    }
  }
}


